/**
 * File   : src/fbs/epx.fbs
 * License: MIT/X11
 * Author : Dries Pauwels <2mjolk@gmail.com>
 * Date   : Wed 05 Sep 2018 06:12
 */

namespace epx;

enum io_t:ubyte { READ = 0, WRITE}

table span {
  start_key:string;
  end_key:string;
}

table command {
  id:ubyte;
  spans:[span];
  writing:io_t;
  value:[ubyte];
}

struct instance_id {
  replica_id:ushort;
  instance_id:ulong (key);
}

struct dependency {
  replica_id:ushort;
  instance_id:ulong;
  committed:ubyte;
}

table instance_data {
  command:command;
  seq:ulong;
  deps:[dependency];
}

enum message_t:ubyte {
  PHASE1,
  PRE_ACCEPT,
  PRE_ACCEPT_OK,
  PRE_ACCEPT_REPLY,
  ACCEPT,
  ACCEPT_REPLY,
  ACCEPT_OK,
  COMMIT,
  PREPARE,
  PREPARE_REPLY,
  PREPARE_OK,
  TRY_PRE_ACCEPT,
  TRY_PRE_ACCEPT_REPLY
}

table message {
  from:ushort;
  to:ushort;
  nack:ubyte;
  ballot:ubyte;
  instance_id:instance_id;
  type:message_t;
  data:instance_data;
  instance_status:status = NONE;
  srt:ulong;
  stp:ulong;
}

table batch {
  id:ulong;
  messages:[message];
}

enum status:ubyte (bit_flags){
  NONE,
  PRE_ACCEPTED,
  PRE_ACCEPTED_EQ,
  ACCEPTED,
  PREPARING,
  TRY_PRE_ACCEPTING,
  COMMITTED,
  EXECUTED
}

table instance {
  key:instance_id;
  ballot:ubyte;
  status:status = NONE;
  idata:instance_data;
}

root_type message;
