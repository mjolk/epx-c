#ifndef EPX_READER_H
#define EPX_READER_H

/* Generated by flatcc 0.5.3-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

typedef struct epx_span epx_span_t;
typedef const epx_span_t *epx_span_struct_t;
typedef epx_span_t *epx_span_mutable_struct_t;
typedef const epx_span_t *epx_span_vec_t;
typedef epx_span_t *epx_span_mutable_vec_t;
typedef struct epx_instance_id epx_instance_id_t;
typedef const epx_instance_id_t *epx_instance_id_struct_t;
typedef epx_instance_id_t *epx_instance_id_mutable_struct_t;
typedef const epx_instance_id_t *epx_instance_id_vec_t;
typedef epx_instance_id_t *epx_instance_id_mutable_vec_t;

typedef const struct epx_command_table *epx_command_table_t;
typedef const flatbuffers_uoffset_t *epx_command_vec_t;
typedef flatbuffers_uoffset_t *epx_command_mutable_vec_t;
typedef const struct epx_instance_data_table *epx_instance_data_table_t;
typedef const flatbuffers_uoffset_t *epx_instance_data_vec_t;
typedef flatbuffers_uoffset_t *epx_instance_data_mutable_vec_t;
typedef const struct epx_message_table *epx_message_table_t;
typedef const flatbuffers_uoffset_t *epx_message_vec_t;
typedef flatbuffers_uoffset_t *epx_message_mutable_vec_t;
typedef const struct epx_batch_table *epx_batch_table_t;
typedef const flatbuffers_uoffset_t *epx_batch_vec_t;
typedef flatbuffers_uoffset_t *epx_batch_mutable_vec_t;
typedef const struct epx_instance_table *epx_instance_table_t;
typedef const flatbuffers_uoffset_t *epx_instance_vec_t;
typedef flatbuffers_uoffset_t *epx_instance_mutable_vec_t;
#ifndef epx_span_identifier
#define epx_span_identifier flatbuffers_identifier
#endif
#define epx_span_type_hash ((flatbuffers_thash_t)0xa2695682)
#define epx_span_type_identifier "\x82\x56\x69\xa2"
#ifndef epx_command_identifier
#define epx_command_identifier flatbuffers_identifier
#endif
#define epx_command_type_hash ((flatbuffers_thash_t)0x1b6d3483)
#define epx_command_type_identifier "\x83\x34\x6d\x1b"
#ifndef epx_instance_id_identifier
#define epx_instance_id_identifier flatbuffers_identifier
#endif
#define epx_instance_id_type_hash ((flatbuffers_thash_t)0xf802c71b)
#define epx_instance_id_type_identifier "\x1b\xc7\x02\xf8"
#ifndef epx_instance_data_identifier
#define epx_instance_data_identifier flatbuffers_identifier
#endif
#define epx_instance_data_type_hash ((flatbuffers_thash_t)0x7101a386)
#define epx_instance_data_type_identifier "\x86\xa3\x01\x71"
#ifndef epx_message_identifier
#define epx_message_identifier flatbuffers_identifier
#endif
#define epx_message_type_hash ((flatbuffers_thash_t)0xbbdfeae9)
#define epx_message_type_identifier "\xe9\xea\xdf\xbb"
#ifndef epx_batch_identifier
#define epx_batch_identifier flatbuffers_identifier
#endif
#define epx_batch_type_hash ((flatbuffers_thash_t)0xd469972e)
#define epx_batch_type_identifier "\x2e\x97\x69\xd4"
#ifndef epx_instance_identifier
#define epx_instance_identifier flatbuffers_identifier
#endif
#define epx_instance_type_hash ((flatbuffers_thash_t)0x4a5c027d)
#define epx_instance_type_identifier "\x7d\x02\x5c\x4a"

typedef uint8_t epx_io_t_enum_t;
__flatbuffers_define_integer_type(epx_io_t, epx_io_t_enum_t, 8)
#define epx_io_t_READ ((epx_io_t_enum_t)UINT8_C(0))
#define epx_io_t_WRITE ((epx_io_t_enum_t)UINT8_C(1))

static inline const char *epx_io_t_name(epx_io_t_enum_t value)
{
    switch (value) {
    case epx_io_t_READ: return "READ";
    case epx_io_t_WRITE: return "WRITE";
    default: return "";
    }
}

static inline int epx_io_t_is_known_value(epx_io_t_enum_t value)
{
    switch (value) {
    case epx_io_t_READ: return 1;
    case epx_io_t_WRITE: return 1;
    default: return 0;
    }
}

typedef uint8_t epx_message_t_enum_t;
__flatbuffers_define_integer_type(epx_message_t, epx_message_t_enum_t, 8)
#define epx_message_t_nack ((epx_message_t_enum_t)UINT8_C(0))
#define epx_message_t_pre_accept ((epx_message_t_enum_t)UINT8_C(1))
#define epx_message_t_pre_accept_ok ((epx_message_t_enum_t)UINT8_C(2))
#define epx_message_t_pre_accept_reply ((epx_message_t_enum_t)UINT8_C(3))
#define epx_message_t_accept ((epx_message_t_enum_t)UINT8_C(4))
#define epx_message_t_accept_ok ((epx_message_t_enum_t)UINT8_C(5))
#define epx_message_t_commit ((epx_message_t_enum_t)UINT8_C(6))
#define epx_message_t_prepare ((epx_message_t_enum_t)UINT8_C(7))
#define epx_message_t_prepare_ok ((epx_message_t_enum_t)UINT8_C(8))

static inline const char *epx_message_t_name(epx_message_t_enum_t value)
{
    switch (value) {
    case epx_message_t_nack: return "nack";
    case epx_message_t_pre_accept: return "pre_accept";
    case epx_message_t_pre_accept_ok: return "pre_accept_ok";
    case epx_message_t_pre_accept_reply: return "pre_accept_reply";
    case epx_message_t_accept: return "accept";
    case epx_message_t_accept_ok: return "accept_ok";
    case epx_message_t_commit: return "commit";
    case epx_message_t_prepare: return "prepare";
    case epx_message_t_prepare_ok: return "prepare_ok";
    default: return "";
    }
}

static inline int epx_message_t_is_known_value(epx_message_t_enum_t value)
{
    switch (value) {
    case epx_message_t_nack: return 1;
    case epx_message_t_pre_accept: return 1;
    case epx_message_t_pre_accept_ok: return 1;
    case epx_message_t_pre_accept_reply: return 1;
    case epx_message_t_accept: return 1;
    case epx_message_t_accept_ok: return 1;
    case epx_message_t_commit: return 1;
    case epx_message_t_prepare: return 1;
    case epx_message_t_prepare_ok: return 1;
    default: return 0;
    }
}

typedef uint8_t epx_status_enum_t;
__flatbuffers_define_integer_type(epx_status, epx_status_enum_t, 8)
#define epx_status_NONE ((epx_status_enum_t)UINT8_C(0))
#define epx_status_PRE_ACCEPTED ((epx_status_enum_t)UINT8_C(1))
#define epx_status_ACCEPTED ((epx_status_enum_t)UINT8_C(2))
#define epx_status_PREPARE ((epx_status_enum_t)UINT8_C(3))
#define epx_status_COMMITTED ((epx_status_enum_t)UINT8_C(4))
#define epx_status_EXECUTED ((epx_status_enum_t)UINT8_C(5))

static inline const char *epx_status_name(epx_status_enum_t value)
{
    switch (value) {
    case epx_status_NONE: return "NONE";
    case epx_status_PRE_ACCEPTED: return "PRE_ACCEPTED";
    case epx_status_ACCEPTED: return "ACCEPTED";
    case epx_status_PREPARE: return "PREPARE";
    case epx_status_COMMITTED: return "COMMITTED";
    case epx_status_EXECUTED: return "EXECUTED";
    default: return "";
    }
}

static inline int epx_status_is_known_value(epx_status_enum_t value)
{
    switch (value) {
    case epx_status_NONE: return 1;
    case epx_status_PRE_ACCEPTED: return 1;
    case epx_status_ACCEPTED: return 1;
    case epx_status_PREPARE: return 1;
    case epx_status_COMMITTED: return 1;
    case epx_status_EXECUTED: return 1;
    default: return 0;
    }
}


struct epx_span {
    alignas(8) uint64_t start;
    alignas(8) uint64_t end;
};
static_assert(sizeof(epx_span_t) == 16, "struct size mismatch");

static inline const epx_span_t *epx_span__const_ptr_add(const epx_span_t *p, size_t i) { return p + i; }
static inline epx_span_t *epx_span__ptr_add(epx_span_t *p, size_t i) { return p + i; }
static inline epx_span_struct_t epx_span_vec_at(epx_span_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t epx_span__size() { return 16; }
static inline size_t epx_span_vec_len(epx_span_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(epx_span)

__flatbuffers_define_struct_scalar_field(epx_span, start, flatbuffers_uint64, uint64_t)
__flatbuffers_define_struct_scalar_field(epx_span, end, flatbuffers_uint64, uint64_t)

struct epx_instance_id {
    alignas(8) uint64_t replica_id;
    alignas(8) uint64_t instance_id;
};
static_assert(sizeof(epx_instance_id_t) == 16, "struct size mismatch");

static inline const epx_instance_id_t *epx_instance_id__const_ptr_add(const epx_instance_id_t *p, size_t i) { return p + i; }
static inline epx_instance_id_t *epx_instance_id__ptr_add(epx_instance_id_t *p, size_t i) { return p + i; }
static inline epx_instance_id_struct_t epx_instance_id_vec_at(epx_instance_id_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t epx_instance_id__size() { return 16; }
static inline size_t epx_instance_id_vec_len(epx_instance_id_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(epx_instance_id)

__flatbuffers_define_struct_scalar_field(epx_instance_id, replica_id, flatbuffers_uint64, uint64_t)
__flatbuffers_define_struct_scalar_field(epx_instance_id, instance_id, flatbuffers_uint64, uint64_t)
/* Note: field has key, but there is no support for find by fields of this type. */


struct epx_command_table { uint8_t unused__; };

static inline size_t epx_command_vec_len(epx_command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline epx_command_table_t epx_command_vec_at(epx_command_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(epx_command_table_t, vec, i, 0)
__flatbuffers_table_as_root(epx_command)

__flatbuffers_define_scalar_field(0, epx_command, id, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_struct_field(1, epx_command, span, epx_span_struct_t, 0)
__flatbuffers_define_scalar_field(2, epx_command, writing, epx_io_t, epx_io_t_enum_t, UINT8_C(0))
__flatbuffers_define_vector_field(3, epx_command, value, flatbuffers_uint8_vec_t, 0)

struct epx_instance_data_table { uint8_t unused__; };

static inline size_t epx_instance_data_vec_len(epx_instance_data_vec_t vec)
__flatbuffers_vec_len(vec)
static inline epx_instance_data_table_t epx_instance_data_vec_at(epx_instance_data_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(epx_instance_data_table_t, vec, i, 0)
__flatbuffers_table_as_root(epx_instance_data)

__flatbuffers_define_table_field(0, epx_instance_data, command, epx_command_table_t, 0)
__flatbuffers_define_scalar_field(1, epx_instance_data, seq, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_vector_field(2, epx_instance_data, deps, epx_instance_id_vec_t, 0)

struct epx_message_table { uint8_t unused__; };

static inline size_t epx_message_vec_len(epx_message_vec_t vec)
__flatbuffers_vec_len(vec)
static inline epx_message_table_t epx_message_vec_at(epx_message_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(epx_message_table_t, vec, i, 0)
__flatbuffers_table_as_root(epx_message)

__flatbuffers_define_scalar_field(0, epx_message, to, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, epx_message, ballot, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_struct_field(2, epx_message, instance_id, epx_instance_id_struct_t, 0)
__flatbuffers_define_scalar_field(3, epx_message, type, epx_message_t, epx_message_t_enum_t, UINT8_C(0))
__flatbuffers_define_table_field(4, epx_message, data, epx_instance_data_table_t, 0)

struct epx_batch_table { uint8_t unused__; };

static inline size_t epx_batch_vec_len(epx_batch_vec_t vec)
__flatbuffers_vec_len(vec)
static inline epx_batch_table_t epx_batch_vec_at(epx_batch_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(epx_batch_table_t, vec, i, 0)
__flatbuffers_table_as_root(epx_batch)

__flatbuffers_define_scalar_field(0, epx_batch, id, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_vector_field(1, epx_batch, messages, epx_message_vec_t, 0)

struct epx_instance_table { uint8_t unused__; };

static inline size_t epx_instance_vec_len(epx_instance_vec_t vec)
__flatbuffers_vec_len(vec)
static inline epx_instance_table_t epx_instance_vec_at(epx_instance_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(epx_instance_table_t, vec, i, 0)
__flatbuffers_table_as_root(epx_instance)

__flatbuffers_define_struct_field(0, epx_instance, id, epx_instance_id_struct_t, 0)
__flatbuffers_define_scalar_field(1, epx_instance, ballot, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, epx_instance, status, epx_status, epx_status_enum_t, UINT8_C(0))
__flatbuffers_define_table_field(3, epx_instance, data, epx_instance_data_table_t, 0)

#include "flatcc/flatcc_epilogue.h"
#endif /* EPX_READER_H */
